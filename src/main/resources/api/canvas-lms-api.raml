#%RAML 1.0
title: canvas-lms-api
version: v1
baseUri: https://canvas.instructure.com/api/v1

securitySchemes:
  Authorization:
    description: Use a Canvas access token
    type: Pass Through
    describedBy:
      headers:
        Authorization:
          description: "Bearer token"
          type: string
          required: true
      responses:
        401:
          description: Unauthorized
securedBy:
  - Authorization
uses:
  enrollmentsTraits: /traits/enrollments/enrollements-traits.raml
  submissionsTraits: /traits/submissions/submissions-traits.raml

types:
  User: !include /datatypes/users/users-dataType.raml
  Courses: !include /datatypes/courses/courses-dataType.raml
  createCourseReq: !include /datatypes/courses/createCourseRequest-dataType.raml
  createCourseRes: !include /datatypes/courses/createCourseResponse-dataType.raml
  updateCourseReq: !include /datatypes/courses/updateCourseRequest-dataType.raml
  updateCourseRes: !include /datatypes/courses/updateCourseResponse-dataType.raml
  accountUser: !include /datatypes/accountUsers/accountUser-dataType.raml
  upcomingEvents: !include /datatypes/events/upcomingEvents-dataType.raml
  missingSubmission: !include /datatypes/users/missingSubmission-dataType.raml
  courseSearchUser: !include /datatypes/courses/courseSearchUser-dataType.raml
  courseUserId: !include /datatypes/courses/courseUserId-dataType.raml
  courseByUserId: !include /datatypes/courses/courseByUserId-dataType.raml
  courseProgress: !include /datatypes/courses/courseProgress-dataType.raml
  coursebulkuserprogress: !include /datatypes/courses/courseBulkUserProgress-dataType.raml
  courseAssignmentGroups: !include /datatypes/assignmentGroups/courseAssignmentGroups-dataType.raml
  activeAccounts: !include /datatypes/account/activeAccounts-dataType.raml
  roles: !include /datatypes/roles/roles-dataType.raml
  enrollmentTerms: !include /datatypes/enrollmentTerms/enrollmentTerms-dataType.raml
  assignment: !include /datatypes/assignment/assignment-dataType.raml
  section: !include /datatypes/sections/sections-dataType.raml
  enrollment: !include /datatypes/enrollments/enrollments-dataType.raml
  account: !include /datatypes/account/account-dataType.raml
  subAccounts: !include /datatypes/account/subAccounts-dataType.raml
  accountById: !include /datatypes/account/accuntById-dataType.raml
  submissions: !include /datatypes/submissions/submissions-dataType.raml
  deleteSections: !include /datatypes/sections/deleteSections-dataType.raml
  deleteEnrollments: !include /datatypes/enrollments/deleteEnrollments-dataType.raml
  login: !include /datatypes/login/login-dataType.raml
  createUserReq: !include /datatypes/users/createUserRequest-dataType.raml
  createUserRes: !include /datatypes/users/createUserResponse-dataType.raml
  createEnrollmentReq: !include /datatypes/enrollments/enrollUserInCourseRequest-dataType.raml
  createEnrollmentRes: !include /datatypes/enrollments/enrollUserInCourseResponse-dataType.raml
  bulkEnrollmentReq: !include /datatypes/enrollments/bulkEnrollmentRequest-dataType.raml
  bulkEnrollmentRes: !include /datatypes/enrollments/bulkEnrollmentResponse-dataType.raml
  SectionReq: !include /datatypes/sections/sectionRequest-dataType.raml
  SectionRes: !include /datatypes/sections/sectionResponse-dataType.raml
  sectionCrosslistReq: !include /datatypes/sections/sectionCrosslistReq-dataType.raml
  LoginReq: !include /datatypes/login/loginRequest-dataType.raml
  LoginRes: !include /datatypes/login/loginResponse-dataType.raml
  EnrollmentTermReq: !include /datatypes/enrollmentTerms/enrollmentTermRequest-dataType.raml
  EnrollmentTermRes: !include /datatypes/enrollmentTerms/enrollmentTermResponse-dataType.raml
  updateSectionReq: !include /datatypes/sections/updateSectionRequest-dataType.raml
  updateSectionRes: !include /datatypes/sections/updateSectionResponse-dataType.raml
  updateEnrollmentTermReq: !include /datatypes/enrollmentTerms/updateEnrollmentTermRequest-dataType.raml
  updateEnrollmentTermRes: !include /datatypes/enrollmentTerms/updateEnrollmentTermResponse-dataType.raml
  updateLoginReq: !include /datatypes/login/updateLoginRequest-dataType.raml
  updateLoginRes: !include /datatypes/login/updateLoginResponse-dataType.raml
  updateUser: !include /datatypes/users/userUpdateRequest-dataType.raml
  updateEnrollment: !include /datatypes/enrollments/updateEnrollmentRequest-dataType.raml
  getEnrollmentTerms: !include /datatypes/enrollmentTerms/getEnrollmentsTrems-dataType.raml

/users/{id}:
  uriParameters:
    id:
      type: integer
      required: true
      example: 118064555
  get:
    displayName: Get user details by ID
    description: Get user details by ID
    responses:
      200:
        body:
          application/json:
            type: User
            example: !include /examples/users/users-example.json
  put:
    displayName: Update user by ID
    description: Modify an existing user.
    body:
      application/json:
        type: updateUser
        example: !include /examples/users/updateUserRequest-example.json
    responses:
      200:
        body:
          application/json:
            type: User
            example: !include /examples/users/users-example.json           
/courses/{id}:
  uriParameters:
    id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: Get courses by ID
    description: Get courses by ID
    responses:
      200:
        body:
          application/json:
            type: Courses
            example: !include /examples/courses/courses-example.json
  delete:
    displayName: Delete course
    description: Delete course
    queryParameters:
      event:
        type: string
        required: true
        example: conclude
    responses:
      200:
        body:
          application/json:
            example: !include /examples/courses/deleteCourse-example.json
  put:
    displayName: Update course
    description: Update course
    body:
      application/json:
        type: updateCourseReq
        example: !include /examples/courses/updateCourseRequest-example.json
    responses:
      200:
        body:
          application/json:
            type: updateCourseRes
            example: !include /examples/courses/updateCourseResponse-example.json

/accounts/{account_id}/courses:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 81259
  post:
    displayName: Create course 
    description: Create course
    body:
      application/json:
        type: createCourseReq
        example: !include /examples/courses/createCourseRequest-example.json
    responses:
      200:
        body:
          application/json:
            type: createCourseRes
            example: !include /examples/courses/createCourseResponse-example.json
  get:
    displayName: List active courses in an account
    description: List active courses in an account
    queryParameters:
      with_enrollments?: boolean
      enrollment_type[]?:
        type: string
        enum: [teacher, student, ta,observer, designer]
      enrollment_workflow_state[]?:
        type: string
        enum: [active, completed, deleted, invited, pending, creation_pending, rejected, inactive]
      published?: boolean
      completed?: boolean
      blueprint?: boolean
      blueprint_associated?: boolean
      public?: boolean
      by_teachers[]?: integer
      by_subaccounts[]?: integer
      hide_enrollmentless_courses?: boolean
      state[]?:
        type: string
        enum: [created, claimed, available, completed, deleted, all]
      enrollment_term_id?: integer
      search_term?: string
      include[]?:
        type: string
        enum: [syllabus_body, term, course_progress, storage_quota_used_mb, total_students, teachers, account_name, concluded, post_manually] 
      sort?:
        type: string
        enum: [course_status,course_name,sis_course_id, teacher,account_name]
      order?:
        type: string
        enum: [asc,desc]
      search_by?:
        type: string
        enum: [course,teacher]
      starts_before?: date-only
      ends_after?: date-only
      homeroom?: boolean
    responses:
      200:
        body:
          application/json:
            type: activeAccounts
            example: !include /examples/account/activeAccounts-example.json  
/accounts/{account_id}/users:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 81259
  get:
    displayName: List users in account
    description: List users in account
    responses:
      200:
        body:
          application/json:
            type: accountUser 
            example: !include /examples/accountUsers/accountUser-example.json
  post:
    displayName: Create user
    description: Create and return a new user and pseudonym for an account.
    body:
      application/json:
        type: createUserReq
        example: !include /examples/users/createUserRequest-example.json
    responses:
      200:
        description: User created successfully
        body:
          application/json:
            type: createUserRes
            example: !include /examples/users/createUserResponse-example.json
/users/self/upcoming_events:
  get:
    displayName: upcoming Events
    description: upcoming Events
    responses:
      200:
        body:
          application/json:
            type: upcomingEvents
            example: !include /examples/events/upcomimgEvents-example.json
/users/{user_id}/missing_submissions:
  uriParameters:
    user_id:
      type: integer
      required: true
      example: 81259
  get:
    displayName: list Missing Submission
    description: list Missing Submission
    queryParameters:
      user_id?: string
      observed_user_id?: string
      include[]?:
        type: string
        enum: [planner_overrides, course]
      filter[]?:
        type: string
        enum: [submittable, current_grading_period]
      course_ids[]?: string      
    responses:
      200:
        body:
          application/json:
            type: missingSubmission
            example: !include /examples/users/missingSubmission-example.json
/courses/{course_id}/search_users:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: list Users in Course
    description: list Users in Course
    queryParameters:
      search_term?: string
      sort?:
        type: string
        enum: [username, last_login, email, sis_id]
      enrollment_type[]?:
        type: string
        enum: [teacher, student, student_view, ta, observer, designer]

      enrollment_role?: string
      enrollment_role_id?: string
      include[]?:
        type: string
        enum: [enrollments, locked, avatar_url, test_student, bio, custom_links, current_grading_period_scores, uuid]
      user_ids[]?: string
      enrollment_state[]?:
        type: string
        enum: [active, invited, rejected, completed, inactive]
    responses:
      200:
        body:
          application/json:
            type: courseSearchUser
            example: !include /examples/courses/courseSearchUser-example.json
/courses/{course_id}/users/{id}:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
    id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: get single user
    description: get single user
    responses:
      200:
        body:
          application/json:
            type: courseUserId
            example: !include /examples/courses/courseUserId-example.json
/users/{user_id}/courses:
  uriParameters:
    user_id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: List courses for a user
    description: List courses for a user
    responses:
      200:
        body:
          application/json:
            type: courseByUserId
            example: !include /examples/courses/courseByUserId-example.json

/courses/{course_id}/users/{user_id}/progress:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
    user_id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: Get user progress
    description: Get user progress
    responses:
      200:
        body:
          application/json:
            type: courseProgress
            example: !include /examples/courses/courseProgress-example.json
/courses/{course_id}/bulk_user_progress:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: Get bulk user progress
    description: Get bulk user progress
    responses:
      200:
        body:
          application/json:
            type: coursebulkuserprogress
            example: !include /examples/courses/courseBulkUserProgress-example.json
/courses/{course_id}/assignment_groups:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: List assignment groups
    description: List assignment groups
    responses:
      200:
        body:
          application/json:
            type: courseAssignmentGroups
            example: !include /examples/assignmentGroups/courseAssignmentGroups-example.json
/accounts/{account_id}/roles:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 81259
  get:
    displayName: List roles
    description: Returns the paginated list of roles in the account.
    queryParameters:
      account_id?: string
      state[]?: string
      show_inherited?: boolean
    responses:
      200:
        body:
          application/json:
            type: roles
            example: !include /examples/roles/roles-example.json
/accounts/{account_id}/roles/{id}:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 81259
    id:
      type: integer
      required: true
      example: 103
  get:
    displayName: Get role
    description: Retrieve details for a single role.
    queryParameters:
      account_id?: string
      role_id?: string
      role?: string
    responses:
      200:
        body:
          application/json:
            type: roles
            example: !include /examples/roles/roles-example.json

/accounts/{accountId}/terms/{termId}:
  uriParameters:
    accountId:
      type: integer
      required: true
      example: 81259
    termId:
      type: integer
      required: true
      example: 102
  get:
    displayName: Get enrollment term
    description: Retrieve details for a single enrollment term.
    responses:
      200:
        body:
          application/json:
            type: enrollmentTerms
            example: !include /examples/enrollmentTerms/enrollmentTerms-example.json

/courses/{course_id}/assignments:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 123
  get:
    displayName: List assignments
    description: Returns the paginated list of assignments for a course.
    responses:
      200:
        body:
          application/json:
            type: assignment
            example: !include /examples/assignment/assignment-example.json
/courses/{course_id}/assignment_groups/{assignment_group_id}/assignments:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
    assignment_group_id:
      type: integer
      required: true
      example: 456789
  get:
    displayName: Get assignments in an assignment group
    description: List assignments for a specific assignment group in a course
    responses:
      200:
        body:
          application/json:
            type: assignment
            example: !include /examples/assignment/assignment-example.json
/courses/{course_id}/sections:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
  get:
    displayName: List course sections
    description: Returns a paginated list of sections for a course
    queryParameters:
      include:
        type: string
        required: false
        description: Associations to include (students, avatar_url, enrollments, total_students, passback_status, permissions)
      search_term:
        type: string
        required: false
        description: Searches course sections for the term. Minimum 2 characters.
    responses:
      200:
        body:
          application/json:
            type: section
            example: !include /examples/sections/sections-example.json
  post:
    displayName: Create Section
    description: Creates a new section for this course.
    body:
      application/json:
        type: SectionReq
        example: !include /examples/sections/sectionRequest-example.json
    responses:
      200:
        body:
          application/json:
            type: SectionRes
            example: !include /examples/sections/sectionResponse-example.json

/courses/{course_id}/sections/{id}:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
    id:
      type: integer
      required: true
      example: 11949585
  get:
    displayName: Get section information
    description: Get details about a specific section by course and section ID
    queryParameters:
      include:
        type: string
        required: false
        description: Associations to include (students, avatar_url, enrollments, total_students, passback_status, permissions)
    responses:
      200:
        body:
          application/json:
            type: section
            example: !include /examples/sections/sections-example.json

/courses/{course_id}/enrollments:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 12635863
  get:
    is: [ enrollmentsTraits.enrollmentsQueryParams ]
    displayName: List enrollments in a course
    description: Returns a paginated list of all enrollments in a course.
    responses:
      200:
        body:
          application/json:
            type: enrollment
            example: !include /examples/enrollments/enrollments-example.json
  post:
    displayName: Enroll a user in a course
    description: Create a new user enrollment for a course.
    body:
      application/json:
        type: createEnrollmentReq
        example: !include /examples/enrollments/enrollUserInCourseRequest-example.json
    responses:
      200:
        description: Enrollment created successfully
        body:
          application/json:
            type: createEnrollmentRes
            example: !include /examples/enrollments/enrollUserInCourseResponse-example.json
/sections/{section_id}/enrollments:
  uriParameters:
    section_id:
      type: integer
      required: true
      example: 987654
  get:
    is: [ enrollmentsTraits.enrollmentsQueryParams ]
    displayName: List enrollments in a section
    description: Returns a paginated list of all enrollments in a section.
    responses:
      200:
        body:
          application/json:
            type: enrollment
            example: !include /examples/enrollments/enrollments-example.json
  post:
    displayName: Enroll a user in a section
    description: Create a new user enrollment for a section.
    body:
      application/json:
        type: createEnrollmentReq
        example: !include /examples/enrollments/enrollUserInCourseRequest-example.json
    responses:
      200:
        description: Enrollment created successfully
        body:
          application/json:
            type: createEnrollmentRes
            example: !include /examples/enrollments/enrollUserInCourseResponse-example.json
            
/users/{user_id}/enrollments:
  uriParameters:
    user_id:
      type: integer
      required: true
      example: 555666
  get:
    is: [ enrollmentsTraits.enrollmentsQueryParams ]
    displayName: List enrollments of a user
    description: Returns a paginated list of all enrollments for a user.
    responses:
      200:
        body:
          application/json:
            type: enrollment
            example: !include /examples/enrollments/enrollments-example.json
/accounts/{account_id}/enrollments/{id}:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 81259
    id:
      type: integer
      required: true
      example: 120507116
  get:
    displayName: Get Enrollment by ID
    description: Get an Enrollment object by Enrollment ID
    responses:
      200:
        body:
          application/json:
            type: enrollment
            example: !include /examples/enrollments/enrollments-example.json

/courses/{course_id}/students/submissions:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 255
  get:
    is: [ submissionsTraits.submissionsForStudentsQuery ]
    displayName: List submissions for multiple assignments by course
    description: List submissions for multiple assignments by course
    responses:
      200:
        body:
          application/json:
            type: submissions
            example: !include /examples/submissions/submissions-example.json
              
/sections/{section_id}/students/submissions:
  uriParameters:
    section_id:
      type: integer
      required: true
      example: 17
  get:
    is: [ submissionsTraits.submissionsForStudentsQuery ]
    displayName: List submissions for multiple assignments by section
    description: List submissions for multiple assignments by section
    responses:
      200:
        body:
          application/json:
            type: submissions
            example: !include /examples/submissions/submissions-example.json
              
/accounts:
  get:
    displayName: List accounts
    description: A paginated list of accounts that the current user can view or manage.
    queryParameters:
      include[]?:
        type: string
        description: |
          Array of additional information to include.
          Allowed values: `lti_guid`, `registration_settings`, `services`, `course_count`, `sub_account_count`
        example: course_count
    responses:
      200:
        body:
          application/json:
            type: account
            example: !include /examples/account/accountResponse-example.json

/accounts/{id}:
  uriParameters:
    id:
      type: integer
      required: true
      example: 81259
  get:
    displayName: Get Account by ID
    description: Retrieve information on an individual account, given by id or sis_account_id.
    responses:
      200:
        body:
          application/json:
            type: accountById
            example: !include /examples/account/accountByIdResponse-example.json

/accounts/{account_id}/sub_accounts:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 81259
  get:
    displayName: List Sub-Accounts
    description: List Sub-Accounts 
    queryParameters:
      recursive?:
        type: boolean
        description: If true, return entire account tree. Defaults to false.
        example: false
      order?:
        type: string
        enum: [id,name]
        description: Sort the accounts by `id` or `name`. Only applies when recursive is false.
        example: id
      include[]?:
        type: string
        enum: [course_count,sub_account_count]
    responses:
      200:
        body:
          application/json:
            type: subAccounts
            example: !include /examples/account/subAccountResponse-example.json

      

   
/sections/{id}/crosslist:
  uriParameters:
    id:
      type: integer
      required: true
      example: 81259
  delete:
    displayName: De-cross-list a section
    description: De-cross-list a section
    queryParameters:
      override_sis_stickiness?: boolean
    responses:
      200:
        body:
          application/json:
            type: deleteSections
            example: !include /examples/sections/deleteSections-example.json
/sections/{id}:
  uriParameters:
    id:
      type: integer
      required: true
      example: 81259
  delete:
    displayName: Delete a section
    description: Delete a section
    responses:
      200:
        body:
          application/json:
            type: deleteSections
            example: !include /examples/sections/deleteSections-example.json
  put:
    displayName: Update a Section
    description: Modify an existing section.
    body:
      application/json:
        type: updateSectionReq
        example: !include /examples/sections/updateSectionRequest-example.json
    responses:
      200:
        description: Section updated successfully
        body:
          application/json:
            type: updateSectionRes
            example: !include /examples/sections/updateSectionResponse-example.json

/courses/{course_id}/enrollments/{id}:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 81259
    id:
      type: integer
      required: true
      example: 81259
  delete:
    displayName: Conclude, deactivate, or delete an enrollment
    description: Conclude, deactivate, or delete an enrollment
    queryParameters:
      task?:
        type: string
        enum: [conclude, delete, inactivate, deactivate]
    responses:
      200:
        body:
          application/json:
            type: deleteEnrollments
            example: !include /examples/enrollments/deleteEnrollments-example.json

/accounts/{account_id}/terms/{id}:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 81259
    id:
      type: integer
      required: true
      example: 81259
  delete:
    displayName: Delete enrollment term
    description: Delete enrollment term
    responses:
      200:
        body:
          application/json:
            type: enrollmentTerms
            example: !include /examples/enrollmentTerms/enrollmentTerms-example.json
  put:
    displayName: Update enrollment term
    description: Update an existing enrollment term for the specified account.
    body:
      application/json:
        type: updateEnrollmentTermReq
        example: !include /examples/enrollmentTerms/updateEnrollmentTermRequest-example.json
    responses:
      200:
        description: EnrollmentTerm updated successfully
        body:
          application/json:
            type: updateEnrollmentTermRes
            example: !include /examples/enrollmentTerms/updateEnrollmentTermResponse-example.json
/users/{user_id}/logins/{id}:
  uriParameters:
    user_id:
      type: integer
      required: true
      example: 81259
    id:
      type: integer
      required: true
      example: 81259
  delete:
    displayName: Delete a user login
    description: Delete a user login
    responses:
      200:
        body:
          application/json:
            type: login
            example: !include /examples/login/login-example.json
/accounts/{account_id}/bulk_enrollment:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 1001
  post:
    displayName: Bulk enroll users in courses
    description: Enrolls multiple users in one or more courses in a single operation.
    body:
      application/json:
        type: bulkEnrollmentReq
        example: !include /examples/enrollments/bulkEnrollmentRequest-example.json
    responses:
      200:
        description: Progress object describing batch enrollment job status
        body:
          application/json:
            type: bulkEnrollmentRes
            example: !include /examples/enrollments/bulkEnrollmentResponse-example.json
/sections/{id}/crosslist/{new_course_id}:
  uriParameters:
    id:
      type: integer
      required: true
      example: 11949585
    new_course_id:
      type: integer
      required: true
      example: 12635863
  post:
    displayName: Cross-list Section
    description: Move the section to another course. The new course must belong to the same root account.
    body:
      application/json:
        type: sectionCrosslistReq
        example: !include /examples/sections/sectionCrosslistRequest-example.json
    responses:
      200:
        body:
          application/json:
            type: SectionRes
            example: !include /examples/sections/sectionResponse-example.json
/accounts/{account_id}/logins:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 10
  post:
    displayName: Create Login
    description: Create a new login for an existing user in the given account.
    body:
      application/json:
        type: LoginReq
        example: !include /examples/login/loginRequest-example.json
    responses:
      200:
        body:
          application/json:
            type: LoginRes
            example: !include /examples/login/loginResponse-example.json
/accounts/{account_id}/terms:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 81259
  get:
    displayName: List enrollment terms
    description: Returns the list of enrollment terms for the account.
    responses:
      200:
        body:
          application/json:
            type: enrollmentTerms
            example: !include /examples/enrollmentTerms/enrollmentTerms-example.json
  post:
    displayName: Create a new enrollment term for the specified account
    description: Create a new enrollment term for the specified account.
    body:
      application/json:
        type: EnrollmentTermReq
        example: !include /examples/enrollmentTerms/enrollmentTermRequest-example.json
    responses:
      200:
        body:
          application/json:
            type: EnrollmentTermRes
            example: !include /examples/enrollmentTerms/enrollmentTermResponse-example.json

/accounts/{account_id}/logins/{id}:
  uriParameters:
    account_id:
      type: integer
      required: true
      example: 123
    id:
      type: integer
      required: true
      example: 1
  put:
    displayName: Update a user login
    description: Update an existing login for a user in the given account.
    body:
      application/json:
        type: updateLoginReq
        example: !include /examples/login/updateLoginRequest-example.json
    responses:
      200:
        description: Login updated successfully
        body:
          application/json:
            type: updateLoginRes
            example: !include /examples/login/updateLoginResponse-example.json
/courses/{course_id}/enrollments/{id}/reactivate:
  uriParameters:
    course_id:
      type: integer
      required: true
      example: 4567
    id:
      type: integer
      required: true
      example: 98765

  put:
    displayName: Reactivate Enrollment
    description: Activates an inactive enrollment.
    responses:
      200:
        body:
          application/json:
            type: updateEnrollment
            example: !include /examples/enrollments/updateEnrollmentResponse-example.json

  
    

    